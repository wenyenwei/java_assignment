============================================
vis/result.rtx
14:51:32_Friday_25_May_2018
============================================
Feedback:
	Your program ("Nimsys.java") has been submitted successfully.
	Compiling your program with "javac"...
	Your program has been result.rtxd successfully :-)
Now, it's your responsibility to test your program for correctness!
Here is a simple test case, and the results:
============================================
Test for input file: in1
Expected results:							Your results:
Welcome to Nim							     |	players.dat (No such file or directory)

$Are you sure you want to remove all players? (y/n)		     <
								     <
$								     <
$								     <
$								     <
$								     <
$								     <
Initial stone count: 1						     <
Maximum stone removal: 1					     <
Player 1: George Washington					     <
Player 2: John Adams						     <
								     <
1 stones left: *						     <
George's turn - remove how many?				     <
								     <
Game Over							     <
John Adams wins!						     <
								     <
$								     <
Initial stone count: 1						     <
Maximum stone removal: 1					     <
Player 1: George Washington					     <
Player 2: John Adams						     <
								     <
1 stones left: *						     <
George's turn - remove how many?				     <
								     <
Game Over							     <
John Adams wins!						     <
								     <
$								     <
Initial stone count: 1						     <
Maximum stone removal: 1					     <
Player 1: John Adams						     <
Player 2: Thomas Jefferson					     <
								     <
1 stones left: *						     <
John's turn - remove how many?					     <
								     <
Game Over							     <
Thomas Jefferson wins!						     <
								     <
$								     <
Initial stone count: 1						     <
Maximum stone removal: 1					     <
Player 1: Thomas Jefferson					     <
Player 2: James Madison						     <
								     <
1 stones left: *						     <
Thomas's turn - remove how many?				     <
								     <
Game Over							     <
James Madison wins!						     <
								     <
$100% | 01 games | James Madison				     <
67%  | 03 games | John Adams					     <
50%  | 02 games | Thomas Jefferson				     <
0%   | 02 games | George Washington				     <
								     <
$								     <

Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: in2
Expected results:							Your results:
Welcome to Nim								Welcome to Nim
								     |	 
$george,George,Washington,2 games,0 wins			     |	$ 
jadams,John,Adams,3 games,2 wins				     |	$ 
jmadison,James,Madison,1 games,1 wins				     <
tom,Thomas,Jefferson,2 games,1 wins				     <
								     <
$100% | 01 games | James Madison				     <
67%  | 03 games | John Adams					     <
50%  | 02 games | Thomas Jefferson				     <
0%   | 02 games | George Washington				     <
								     <
$									$

Oops, your results seem to be INCORRECT :-(
============================================
Test for input file: in3
Expected results:							Your results:
Welcome to Nim								Welcome to Nim
								     |	 
$'createplayer' is not a valid command.					$'createplayer' is not a valid command.
								     |	 
$Incorrect number of arguments supplied to command.			$Incorrect number of arguments supplied to command.
								     |	 
$								     |	$ 
$									$

Oops, your results seem to be INCORRECT :-(
============================================
src/NimAIPlayer.java
14:51:04_Friday_25_May_2018
============================================
/*
   The University of Melbourne
   School of Computing and Information Systems
   COMP90041 Programming and Software Development
   Lecturer: Prof. Rui Zhang
   Semester 1, 2018
   Copyright The University of Melbourne 2018
   Project C
   Wenyen Wei, username: wenyenw, studentID: 949624
*/
import java.util.concurrent.ThreadLocalRandom;

public class NimAIPlayer extends NimPlayer{
	// you may further extend a class or implement an interface
	// to accomplish the tasks.	

	public int NimAIPlayer(int stoneUpperBound, int currentStoneAmount, int initStoneAmount) {

    // return a winning guaranteed stone amount

    // init return stone amount
    int returnAmount = 0;


    // get winNumbersList
    int[] winNumber = winNumbers(initStoneAmount, stoneUpperBound);

    // then identify the number to pick from the winNumber list above
    for (int i = 0; i < winNumber.length - 2; i++){
      // if match winning condition
      if (winNumber[i] > 0){
        if ((initStoneAmount - currentStoneAmount) < winNumber[i] && (initStoneAmount - currentStoneAmount) > winNumber[i+1]){
          returnAmount = winNumber[i] - (initStoneAmount - currentStoneAmount);
          // exit loop
          i = winNumber.length - 2;
        }
        // if not match winning condition, return valid random number
        else if ((initStoneAmount - currentStoneAmount) == winNumber[i]) {
          returnAmount = ThreadLocalRandom.current().nextInt(1, stoneUpperBound + 1);
          // exit loop
          i = winNumber.length - 2;
        }           
      }
    }

    return returnAmount;

	}

  // make a list of number to reach to guarantee wins
  private static int[] winNumbers(int initStoneAmount, int stoneUpperBound){
    int[] winNumber = new int[20];
    int remainStoneAmount = initStoneAmount-1;
    int count = 0;
    while (remainStoneAmount >= 0){
      winNumber[count] = remainStoneAmount;
      remainStoneAmount = remainStoneAmount - (stoneUpperBound + 1);
      count++;
    }
    return winNumber;
  }

    // remove stone method
    public int removeStone(String currentPlayer, int stoneUpperBound, int currentStoneAmount, int initStoneAmount){
        Nimsys nameList  = new Nimsys();
        String playerName = nameList.playerList(currentPlayer).split(",")[1];
        System.out.printf("%s's turn - remove how many?%n", playerName);
        System.out.println();
        return NimAIPlayer(stoneUpperBound, currentStoneAmount, initStoneAmount);
    }

	public String advancedMove(boolean[] available, String lastMove) {
		// the implementation of the victory
		// guaranteed strategy designed by you
		String move = "";
		
		return move;
	}
}============================================
src/NimPlayer.java
14:51:06_Friday_25_May_2018
============================================
/*
   The University of Melbourne
   School of Computing and Information Systems
   COMP90041 Programming and Software Development
   Lecturer: Prof. Rui Zhang
   Semester 1, 2018
   Copyright The University of Melbourne 2018
   Project C
   Wenyen Wei, username: wenyenw, studentID: 949624
*/
import java.util.Scanner;
public class NimPlayer {
    private static Scanner keyboard = new Scanner(System.in);

    // remove stone method
    public int removeStone(String currentPlayer){
        Nimsys nameList  = new Nimsys();
        String playerName = nameList.playerList(currentPlayer).split(",")[1];
        System.out.printf("%s's turn - remove how many?%n", playerName);
        System.out.println();
        return keyboard.nextInt();
    }

    // remove player prompt 
    public String removePromptInput(){
        System.out.println("Are you sure you want to remove all players? (y/n)");
        return keyboard.nextLine();        
    }

    // reset stat prompt 
    public String resetStatInput(){
        System.out.println("Are you sure you want to reset all player statistics?");
        return keyboard.nextLine();        
    }

    // prompt input
    public String promptInput(){
        System.out.println(" ");
        System.out.print("$");
        return keyboard.nextLine();        
    }

    // play again
    public String reply(){
        System.out.println("Do you want to play again (Y/N):");
        return keyboard.next();        
    }
}
============================================
src/Nimsys.java
14:51:07_Friday_25_May_2018
============================================
/*
   The University of Melbourne
   School of Computing and Information Systems
   COMP90041 Programming and Software Development
   Lecturer: Prof. Rui Zhang
   Semester 1, 2018
   Copyright The University of Melbourne 2018
   Project C
   Wenyen Wei, username: wenyenw, studentID: 949624
*/
import java.util.Arrays;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Scanner;


public class Nimsys {

	//public variables
	private static int currentStoneAmount, removeStoneAmount, stoneUpperBound;
	private static String currentPlayer, player1, player2;
	private static String[] playersList = new String[40];
	private static int playerAmount = 0;
	enum Actions {
		addplayer, addaiplayer, removeplayer, editplayer, resetstats, displayplayer, rankings, startgame, exit
	};
	private static int indexOfUsername;
	private static String variables;
	private static String username;
	private static boolean isAIPlayer = false;

	// system start
	public static void main (String[] args) {
		// read file
		Scanner inputStream = null;
		try{
			inputStream = new Scanner(new FileInputStream("players.dat"));
		}
		catch(FileNotFoundException e){
			System.out.println(e.getMessage());
			exitGame();
		}
		String playerListString = inputStream.nextLine();
		// store file to player list
		processingData(playerListString);

		// start Nimsys
		System.out.println("Welcome to Nim");
		prompt();
	}

	// return player data according to username
	public String playerList(String username){
		int index = getUserIndex(username);
		return playersList[index+1];
	}	

	// processing data from file
	private static void processingData(String list) {
		playersList = list.substring(1,list.length()-1).split(", ");
		int countPlayerAmount = 0;
		for (int i = 0; i < 40; i++){
			if (playersList[i] != null && !playersList[i].equalsIgnoreCase("null")){
				countPlayerAmount++;
			}
		}

		playerAmount = countPlayerAmount;
	}

	// command prompt
	private static void prompt() {
		NimPlayer prompt = new NimPlayer();
		String action = prompt.promptInput();

		// check action
		checkAction(action);
	}

	// action validity exception http://xanxusvervr.blogspot.com.au/2017/12/java.html
	private static class ActionException extends Exception{
	    public ActionException(String msg){
	        super(msg);
	    }
	}
	
	// action validity
	private static void checkActionValidity(String action) throws ActionException{
	    if (!action.equalsIgnoreCase("addplayer") && !action.equalsIgnoreCase("addaiplayer") && !action.equalsIgnoreCase("editplayer") && !action.equalsIgnoreCase("removeplayer") && !action.equalsIgnoreCase("displayplayer") && !action.equalsIgnoreCase("resetstats") && !action.equalsIgnoreCase("rankings") && !action.equalsIgnoreCase("startgame") && !action.equalsIgnoreCase("exit")){
	        String msg = "\'"+action+"\' is not a valid command.";
	        throw new ActionException(msg);
	    }
	}

	// action validity exception
	private static class NumOfArgsException extends Exception{
		public NumOfArgsException(String msg){
	        super(msg);
	    }
	}
	
	// num of args validity
	private static void checkNumberOfArgumentsValidity(String[] action, int correctNum) throws NumOfArgsException{
	    if (action.length != correctNum){
	    	String msg = "Incorrect number of arguments supplied to command.";
	        throw new NumOfArgsException(msg);
	    }
	}

	// num of args validity: 0 args 
	private static void checkNumberOfArgumentsValidityZero(String action) throws NumOfArgsException{
	    if (!action.equalsIgnoreCase("removeplayer") && !action.equalsIgnoreCase("resetstats") && !action.equalsIgnoreCase("displayplayer") && !action.equalsIgnoreCase("rankings") && !action.equalsIgnoreCase("exit")){
	    	String msg = "Incorrect number of arguments supplied to command.";
	        throw new NumOfArgsException(msg);
	    }
	}


	// return number of required args according to action
	private static int validNumberOfArgs(String action){
		int numOfArgs = 0;
		switch (action){
			case "addplayer":
				numOfArgs = 3;
				break;
			case "addaiplayer":
				numOfArgs = 3;
				break;
			case "removeplayer":
				numOfArgs = 1;
				break;
			case "editplayer":
				numOfArgs = 3;
				break;
			case "resetstats":
				numOfArgs = 1;
				break;
			case "displayplayer":
				numOfArgs = 1;
				break;
			case "startgame":
				numOfArgs = 4;
				break;
			case "rankings":
				numOfArgs = 1;
				break;
		}
		return numOfArgs;
	}

	// proceed input action
	private static void checkAction(String action) {
		// get action and check action validity
		String[] action_split = action.split(" ");
		if (action.length() > 0){
			// check action validity
			try{
		        checkActionValidity(action_split[0].toLowerCase());
		    }
		    catch(ActionException e){
		        System.out.println(e.getMessage());
		        prompt();
		    }
			Actions function = null;
			function = Actions.valueOf(action_split[0].toLowerCase());

			// set vars back to null
			variables = null; 
			username = null;

			// if has args, check number of args validity and get username index
			if (action_split.length > 1){
				// check num of args validity
				try{
			        checkNumberOfArgumentsValidity(action_split[1].split(","), validNumberOfArgs(action_split[0].toLowerCase()));
			    }
			    catch(NumOfArgsException e){
			        System.out.println(e.getMessage());
			        prompt();
			    }				
				// swap lname, fname for addplayer and editplayer
				if (action_split[0].equalsIgnoreCase("addplayer") || action_split[0].equalsIgnoreCase("editplayer")){
					variables = action_split[1].split(",")[0]+"," + action_split[1].split(",")[2] +","+ action_split[1].split(",")[1]; 
				}else{
					variables = action.split(" ")[1];
				}
				// get username and index
				username = variables.split(",")[0];
				indexOfUsername = getUserIndex(username);		
			}
			// if no args check number of args validity
			else if (action_split.length == 1){
				try{
					checkNumberOfArgumentsValidityZero(action_split[0].toLowerCase());
				}catch(NumOfArgsException e){
			        System.out.println(e.getMessage());
			        prompt();					
				}
			}

			switch(function){

				// addplayer 
				case addplayer:
					addPlayer();
					break;

				// addaiplayer
				case addaiplayer:
					addAiPlayer();
					break;

				// removeplayer function
				case removeplayer:
					removePlayer();
					break;

				// editplayer function
				case editplayer:
					editPlayer();
					break;

				// resetstats function
				case resetstats:
					resetStats();
					break;

				// displayplayer function
				case displayplayer:
					displayPlayer();
					break;

				// rankings function
				case rankings:
					rankings();
					break;

				// startgame function
				case startgame:
					startGame();
					prompt();
					break;

				// exit function
				case exit:
					exitGame();
					break;
			}
		
		// Scanner no waiting problem, prevent blank input				
		}else{
			prompt();
		}
	}

	// exit function
	private static void exitGame(){
		PrintWriter outputStreamName = null;
		try{
			outputStreamName = new PrintWriter(new FileOutputStream("players.dat", false));
		}
		catch(FileNotFoundException e){
			System.out.println(e.getMessage());
		}
		outputStreamName.println(Arrays.toString(playersList));
		outputStreamName.close();
		System.out.println();
		System.exit(0);
	}


	// get user index
	private static int getUserIndex(String usernameInput){
		int index = -1;
		for (int i = 0; i < playersList.length; i++){
			if(playersList[i] != null){
				if (playersList[i].equalsIgnoreCase(usernameInput)){
					index = i;
					isAIPlayer = false;
				}
				// check if is ai player
				else if (playersList[i].equalsIgnoreCase("ai_"+usernameInput)){
					index = i;
					isAIPlayer = true;
				}	
			}
		}
		return index;
	}

	// if user exist
	private static boolean userExist(String usernameInput){
		boolean userExist = false;
		if (getUserIndex(usernameInput) == -1){
			userExist = false;
		}else if (getUserIndex(usernameInput) >= 0){
			userExist =  true;
		}
		return userExist;
	}

	// is AI player indicator
	private static boolean isAIPlayer(){
		return isAIPlayer;
	}

	// add ai player function
	private static void addAiPlayer(){
		// player not exist
		if (indexOfUsername == -1){
			// mark in username as ai
			username = "ai_" + username;
			// save to playerList
			playersList[playerAmount] = username;
			playersList[playerAmount + 1] = variables + ",0 games,0 wins";
			playerAmount = playerAmount + 2;
			prompt();
		}
		// player exist
		else if (indexOfUsername >= 0){
			System.out.println("The player already exists.");
			prompt();
		}
	}

	// add player function
	private static void addPlayer(){
		// player not exist
		if (indexOfUsername == -1){
			playersList[playerAmount] = username;
			playersList[playerAmount + 1] = variables + ",0 games,0 wins";
			playerAmount = playerAmount + 2;
			prompt();
		}
		// player exist
		else if (indexOfUsername >= 0){
			System.out.println("The player already exists.");
			prompt();
		}
	}

	// remove player function
	private static void removePlayer(){
		// remove all players
		if (variables == null){
			NimPlayer removePrompt = new NimPlayer();
			String reply = removePrompt.removePromptInput();
			if (reply.equalsIgnoreCase("y")){
				for (int i = 0; i < playersList.length; i++){
					playersList[i] = null;
				}
			}
		}
		// player not exist
		else if (indexOfUsername == -1){
			System.out.println("The player does not exist.");
		}
		// player exist
		else if (indexOfUsername >= 0){
			playersList[indexOfUsername] = null;
			playersList[indexOfUsername + 1] = null;
			playerAmount = playerAmount - 2;
		}
		prompt();
	}

	// edit player function
	private static void editPlayer(){
		// player not exist
		if (indexOfUsername == -1){
			System.out.println("The player does not exist.");
		}
		// player exist
		else if (indexOfUsername >= 0){
			playersList[indexOfUsername] = username;
			String gameStat = ","+playersList[indexOfUsername+1].split(",")[3]+","+playersList[indexOfUsername+1].split(",")[4];
			playersList[indexOfUsername + 1] = variables + gameStat;
		}
		prompt();
	}

	// reset stats function
	private static void resetStats(){
		// remove all players
		if (variables == null){
			NimPlayer resetStatsPrompt = new NimPlayer();
			String reply = resetStatsPrompt.resetStatInput();
			if (reply.equalsIgnoreCase("y")){
				for (int i = 0; i < playersList.length; i+=2){
					updateStat(i);
				}
			}
		}
		// player not exist
		else if (indexOfUsername == -1){
			System.out.println("The player does not exist.");
		}
		// player exist
		else if (indexOfUsername >= 0){
			updateStat(indexOfUsername);
		}
		prompt();
	}

	// update player stat 
	private static void updateStat(int index){
		playersList[index + 1] = playersList[index].split(",")[0] + playersList[index].split(",")[1] + playersList[index].split(",")[2] + " 0 games, 0 wins";
	}

	// display player function
	private static void displayPlayer(){
		// display all players
		if (variables == null){
			// getting sub list
			String[] varsList = new String[20];
			// sort player alphabetically
			varsList = sort("alphabet", playersList);
			for (int i = 0; i < varsList.length; i++){
				if (varsList[i] != null && !varsList[i].equalsIgnoreCase("null")){
					System.out.println(varsList[i]);
				}
			}
		}
		// player not exist
		else if (indexOfUsername == -1){
			System.out.println("The player does not exist.");
		}
		// player exist
		else if (indexOfUsername >= 0){
			System.out.println(playersList[indexOfUsername + 1]);
		}
		prompt();
	}

	// rankings function
	private static void rankings(){
		//apply sorting
		String[] varsList = new String[20]; 
		String[] resListForAlpha = new String[10]; 

		// first sort alphabetically, then sort accordance order
		if (variables == null){
			varsList = sort("desc", playersList);
		}else{
			varsList = sort(variables, playersList);
		}

		// processing user game data
		for (int i = 0; i < 10; i++){
			if (varsList[i] != null && !varsList[i].equalsIgnoreCase("null")){
				String[] variable = varsList[i].split(",");
				int gameAmount = Integer.parseInt(variable[3].split(" ")[0]);
				int percentage;
				if (gameAmount == 0){
					percentage = 0;
				}else{
					percentage = 100 * Integer.parseInt(variable[4].split(" ")[0]) / gameAmount;
				}
				String result = "%-4d%%| %s games | %s %s%n";
				System.out.printf(result, percentage, statFormatter(gameAmount), variable[1], variable[2]);	
			}
		}
		prompt();
	}

	// stat formatter
	private static String statFormatter(int gameAmount){
		String gameAmountString;
		// if number less than 10 then add 0 in front
		if (gameAmount < 10){
			gameAmountString = "0"+Integer.toString(gameAmount);
		}else{
			gameAmountString = Integer.toString(gameAmount);
		}
		return gameAmountString;
	}

	// sorting in alphabetical order for rankings
	private static String[] sortAlphabetically_rankings(String[] varsList){
		String[] tieList = new String[10];
		int count = 0;
	    for(int i = 0; i < varsList.length - 1; i++){
	        for(int j = i+1; j < varsList.length; j++){
	        	if (varsList[i] != null && varsList[j] != null && !varsList[i].equalsIgnoreCase("null") && !varsList[j].equalsIgnoreCase("null")){
		            // if ranking is a tie, sort by alphabetical order
		            int firstElement = 0;
		            int lastElement = 0;
		            if (varsList[i].split(",")[0].equalsIgnoreCase(varsList[j].split(",")[0])){
		            	tieList[i] = varsList[i];
		            	// first tie element, record index
		            	if (!varsList[i-1].split(",")[0].equalsIgnoreCase(varsList[i].split(",")[0])){
		            		firstElement = i;
		            	}
		            	if (!varsList[j].split(",")[0].equalsIgnoreCase(varsList[j+1].split(",")[0])){
		            		lastElement = j;
		            		tieList[j] = varsList[j].split(",")[2];
		            		// last tie element, sort alphabetically
		            		sortAlphabetically(tieList);
		            		// init tieList
		            		tieList = new String[10];
		            		// put them back to varsList
		            		for (int c = firstElement; c < lastElement - 1; c++){
		            			varsList[c] = tieList[c];
		            		}		            		
		            	}
		            }
	        	}
	        }
	    }
	    return varsList;
	}

	// sorting in alphabetical order
	private static String[] sortAlphabetically(String[] varsList){
	    for(int i = 0; i < varsList.length - 1; i++){
	        for(int j = i+1; j < varsList.length; j++){
	        	if (varsList[i] != null && varsList[j] != null && !varsList[i].equalsIgnoreCase("null") && !varsList[j].equalsIgnoreCase("null")){
		            if(varsList[i].split(",")[0].compareTo(varsList[j].split(",")[0]) >=0){
		                String temp = varsList[i];
		                varsList[i] = varsList[j];
		                varsList[j] = temp;
		            }
	        	}
	        }
	    }
	    return varsList;
	}

	// sorting ranking function
	private static String[] sort(String order, String[] args){
		
		// then get sub list
		String[] varsList = new String[20];
		int count = 0;
		for (int i = 1; i < args.length - 1; i += 2){
			varsList[count] = args[i];
			count ++;
		}


		// if alphabetically
		if (order.equalsIgnoreCase("alphabet")){
			sortAlphabetically(varsList);
	    }

		//if asc
		else if (order.equalsIgnoreCase("asc")){
			// selection sort
			for(int i = 0; i < varsList.length - 1; i++){
		        for(int j = i + 1;j < varsList.length; j++){
		        	if (varsList[i] != null && varsList[j] != null && !varsList[i].equalsIgnoreCase("null") && !varsList[j].equalsIgnoreCase("null")){
		        		// count percentage and avoid divide 0
		        		int perc_i, perc_j;
			        	if (Integer.parseInt(varsList[i].split(",")[3].split(" ")[0]) > 0){
			        		perc_i = 100 * Integer.parseInt(varsList[i].split(",")[4].split(" ")[0]) / Integer.parseInt(varsList[i].split(",")[3].split(" ")[0]);
			        	}else{
			        		perc_i = 0;
			        	}
			        	if (Integer.parseInt(varsList[j].split(",")[3].split(" ")[0]) > 0){
			        		perc_j = 100 * Integer.parseInt(varsList[j].split(",")[4].split(" ")[0]) / Integer.parseInt(varsList[j].split(",")[3].split(" ")[0]);
			        	}else{
			        		perc_j = 0;
			        	}

			        	// selection sort
			            if(perc_i > perc_j){
			                String temp = varsList[i];
			                varsList[i] = varsList[j];
			                varsList[j] = temp;
			            }	        		
		        	}
		        }
		    }			
		}


		// if desc
		else if (order.equalsIgnoreCase("desc")){
			// selection sort
			for(int i = varsList.length - 1; i >= 0; i--){
		        for(int j = i - 1;j >= 0; j--){
		        	if (varsList[i] != null && !varsList[i].equalsIgnoreCase("null") && varsList[j] != null && !varsList[j].equalsIgnoreCase("null") ){
		        		// count percentage and avoid divide 0
		        		int perc_i, perc_j;
			        	if (Integer.parseInt(varsList[i].split(",")[3].split(" ")[0]) != 0){
			        		perc_i = 100 * Integer.parseInt(varsList[i].split(",")[4].split(" ")[0]) / Integer.parseInt(varsList[i].split(",")[3].split(" ")[0]);
			        	}else{
			        		perc_i = 0;
			        	}

			        	if (Integer.parseInt(varsList[j].split(",")[3].split(" ")[0]) != 0){
			        		perc_j = 100 * Integer.parseInt(varsList[j].split(",")[4].split(" ")[0]) / Integer.parseInt(varsList[j].split(",")[3].split(" ")[0]);
			        	}else{
			        		perc_j = 0;
			        	}

			        	// selection sort
			            if(perc_i > perc_j){
			                String temp = varsList[i];
			                varsList[i] = varsList[j];
			                varsList[j] = temp;
			            }	        		
		        	}
		        }
		    }			
		}
	    return varsList;
	}

	// start game function
	private static void startGame(){
		NimGame newGame = new NimGame();
		String[] gameVariables = variables.split(",");
		// user exist
		if (userExist(gameVariables[2]) && userExist(gameVariables[3])){
			// check if player2 is ai player
			if (isAIPlayer()){
				gameVariables[3] = "ai_" + gameVariables[3];
			}
			// switch to player1 and check ai			
			userExist(gameVariables[2]);
			if (isAIPlayer()){
				gameVariables[2] = "ai_" + gameVariables[2];
			}

			newGame.game(gameVariables[0], gameVariables[1], gameVariables[2], gameVariables[3]);
		// user not exist
		}else{
			System.out.println("One of the players does not exist.");	
		}
		// add game record
		String[] winner = newGame.addRecord();
		for (int i = 0; i < winner.length; i++){
			if (winner[i] != null){

			addPlayerRecord(gameVariables[2], winner[i]);
			addPlayerRecord(gameVariables[3], winner[i]);	
			}		
		}
	}

	// add player record function
	private static void addPlayerRecord(String usernameInput, String winner){
		// get index and get stats
		int index = getUserIndex(usernameInput);
		String[] playerVariables = playersList[index + 1].split(",");
		playerVariables[3] = Integer.toString(Integer.parseInt(playerVariables[3].split(" ")[0]) + 1) + " games";
		// if winner then update wins
		if (usernameInput.equalsIgnoreCase(winner)){
			playerVariables[4] = Integer.toString(Integer.parseInt(playerVariables[4].split(" ")[0]) + 1) + " wins";
		}
		String updatedPlayer = "";
		// re-assemble stat data
		for (int i = 0; i < playerVariables.length - 1; i++){
			updatedPlayer = updatedPlayer + playerVariables[i] + ",";
		}
		playersList[index + 1] = updatedPlayer + playerVariables[4];
	}

}
============================================
src/NimGame.java
14:51:05_Friday_25_May_2018
============================================
/*
   The University of Melbourne
   School of Computing and Information Systems
   COMP90041 Programming and Software Development
   Lecturer: Prof. Rui Zhang
   Semester 1, 2018
   Copyright The University of Melbourne 2018
   Project C
   Wenyen Wei, username: wenyenw, studentID: 949624
*/
public class NimGame {

	//public variables
	private static int currentStoneAmount, removeStoneAmount, stoneUpperBound, initStoneAmount, winnerCount;
	private static String currentPlayer, player1, player2, player1Name, player2Name;
	private static String[] winner = new String[40];
	private static boolean player1AI, player2AI;

	// new game start
	public static void game(String initStone, String maxStone, String playerOne, String playerTwo) {

		// players setting
		NimPlayer player = new NimPlayer();

		player1 = playerOne;
		player2 = playerTwo;

		Nimsys nameList = new Nimsys();
		player1Name = nameList.playerList(player1).split(",")[1]+" "+nameList.playerList(player1).split(",")[2];
		player2Name = nameList.playerList(player2).split(",")[1]+" "+nameList.playerList(player2).split(",")[2];
		

		// indicate if players are ai players
		if (player1.length() > 3){
			if (player1.substring(0,3).equalsIgnoreCase("ai_")){
				player1AI = true;
			}else{
				player1AI = false;
			}			
		}
		if (player2.length() > 3){
			if (player2.substring(0,3).equalsIgnoreCase("ai_")){
				player2AI = true;
			}else{
				player2AI = false;
			}		
		}

		// init vars
		initStoneAmount = Integer.parseInt(initStone);
		for (int i = 0; i < winner.length; i++){
			winner[i] = null;
		}
		winnerCount = 0;

		initializeGameSetting(initStoneAmount, Integer.parseInt(maxStone));
	}

    // add result to record
    public static String[] addRecord() {
    	return winner;
    }

	// initialize stone number
	private static void initializeGameSetting(int initStone, int maxStone) {

		// set upperbound
		stoneUpperBound = maxStone;

		// set initial number
		currentStoneAmount = initStone;

		// start with first player 
		currentPlayer = player1;

		// print game setting
		System.out.println();
		System.out.printf("Initial stone count: %d%n", initStone);
		System.out.printf("Maximum stone removal: %d%n", maxStone);
		System.out.printf("Player 1: %s%n", player1Name);
		System.out.printf("Player 2: %s%n", player2Name);
		System.out.println();


		// start game
		showCurrentStoneAmount(currentStoneAmount);
		switchPlayer();

	}

	// show stone number in asterisks
	private static void printStars(int numStars){
		for(int i = 0; i < numStars; i++)
			System.out.printf(" *");
		System.out.println();
	}

	// current stone amount indicator
	private static void showCurrentStoneAmount(int currentStoneAmount){
		System.out.printf("%d stones left:", currentStoneAmount);
		printStars(currentStoneAmount);
	}

	// current player indicator
	private static void currentPlayerSwitcher(String nowPlayer){
		if (nowPlayer == player1){
			currentPlayer = player2;
		}
		else if (nowPlayer == player2){
			currentPlayer = player1;
		}
	}

	// reduce stones according to user input
	private static void stoneReducer(int removeStoneAmount){
		currentStoneAmount = currentStoneAmount - removeStoneAmount;
	}

	// get current player name
	private static String currentPlayerName(String currentPlayer){
		String currentPlayerName = null;
		// player1
		if (currentPlayer == player1){
			currentPlayerName =  player1Name;
		}
		// player2
		else if (currentPlayer == player2){
			currentPlayerName = player2Name;
		}
		return currentPlayerName;
	}

	// check win
	private static void checkWin() {
		currentPlayerSwitcher(currentPlayer);
		// End game
		if (currentStoneAmount <= 0) {
			System.out.println("Game Over");
			System.out.printf("%s wins!%n", currentPlayerName(currentPlayer));
			winner[winnerCount] = currentPlayer;
			winnerCount += 1;
			// playAgain();
		}
		// Game continue
		else {
			showCurrentStoneAmount(currentStoneAmount);
			switchPlayer();
		}
	}

	// move validity exception http://xanxusvervr.blogspot.com.au/2017/12/java.html
	private static class moveException extends Exception{
	    public moveException(String msg){
	        super(msg);
	    }
	}
	
	// move validity
	private static void checkStoneNumValidity(int removeStoneAmount) throws moveException{
	    if (removeStoneAmount > stoneUpperBound || removeStoneAmount < 1){
	    	String msg = "Invalid move. You must remove between 1 and "+stoneUpperBound+" stones";
	        throw new moveException(msg);
	    }
	}

	// check if player is ai
	private static boolean checkAI(String currentPlayer) {
		boolean indicator = false;
		if (currentPlayer == player1){
			if (player1AI){
				indicator = true;
			}
		}else if (currentPlayer == player2) {
			if (player2AI){
				indicator = true;
			}
		}
		return indicator;
	}

	// check move validity	
	private static void checkStoneAmount(int removeStoneAmount){
	    try {
	    	checkStoneNumValidity(removeStoneAmount);
	    } catch(moveException e) {
	    	System.out.println(e.getMessage());
            switchPlayer();
	    }		
	}

	// switch player action
    private static void switchPlayer() {
    	int removeStoneAmount;
    	// if currentPlayer is AIPlayer, call NimAIPlayer
    	if (checkAI(currentPlayer)){
    		// call NimAIPlayer to return a remove stone amount
    		NimAIPlayer aiPlayer = new NimAIPlayer();
    		removeStoneAmount = aiPlayer.removeStone(currentPlayer, stoneUpperBound, currentStoneAmount, initStoneAmount);
    	}
    	// if currentlyPlayer is human player, call NimPlayer
    	else{
    		NimPlayer humanPlayer = new NimPlayer();
	    	removeStoneAmount = humanPlayer.removeStone(currentPlayer);	
    	}
    	checkStoneAmount(removeStoneAmount);
	    stoneReducer(removeStoneAmount);
        checkWin();
    }
}